1. 100, 011, 110, 111, 101, 001
2.a. 111010110000
the cmp function is comparing the values in the 
2nd and 3rd registers while not being changed, rg 0 and 1 are untouched, and depending on the values in the registers
it will alter the zero flag. If they are the same, then the zero flag is set to 1, 
however, if they are not the same, the zero flag is set to 0, the program counter will then move forward
with the next line in the program.
2.b. 101000110000
the add function is adding the values in the 0 and the 3rd register,
the value in the 0 register will remain unchanged, and the added value will rewrite the value in third register.
The 1 and 2 register will be untouched and the zero flag is dependant on the value of the addition;
if the addition results in a 0 then the zero flag will be set to 1. If its anything else then it will 
be set to 0. After the addition, the program counter will be increased and move to the following line if 
2.c. 001000000001
the jump zero function is soley reliant on the zero flag being set.
If the zero flag is not set, then nothing is going to occur and every register will remain untouched; also the program counter
will not jump anywhere as well. If the zero flag is set then, the program will move to the instruction that is the result 
of the current counter value and a 1 since the imm value is 0001. All the registers are left untouched, and the only special case 
is if this is the instruction at line 15 of the program, it would then wrap around to the beginning as a loop until the jump instruction
gets skipped or ended with a jmp, Rxx, Rxx, 4'b0000 line after it.

3.a. {addi, RXX, Rg1, 4'b0011} 
This instruction will add the value found in rg1 with the boolean equivalent that was provided of 4'b0011, which is 3, and the result will be stored in the Rg1. The equation can be displayed as
Rg1 + 3 = #. Since this is an arithmetic instruction, the zero flag will be tested. If the result of the addition is 0, the zero flag will be set; if the result is not 0, the zero flag will not be set. 
The program counter is also increased by 1, so after the addition is finished, the following instruction will occur. 
3.b. {add, Rg1, Rg1, 4'b0011}
This instruction will add the value found in register 1 with the boolean equivalent of 4'b0011 which is 3, resulting in the equation Rg1 + 3 = #. 
Rg1 one will retain the result of the sum that occured and its previous value will be replaced. The program counter is increased and the zero flag is also tested,
if the result of this addition is not 0, then the zero flag will not be set; however, if the result is 0, then the zero flag will be set. 
3.c. {jmp, Rxx, Rxx, 4'b0000}
The instruction occuring here will be a jump instruction that is usually found at the end of a program in order to finalize the program counter. 
The registers will remain untouched as well, along with the zero flag, and the program will stop here since it will not increase the 
program counter, unallowing for the continuing through the code.
3.d. {jmp, Rxx, Rxx, 4'b0001}
The instruction here will result in a jump instruction that will move the program counter by the binary equivalent of 4'b0001, resulting in the program counter moving by 1.
The registers will reamin unchanged and the zero flag will also not be touched as well. The only exception is if the program counter is the last line, 15,
the program counter will then encounter an overflow which will result in the program counter being set at 0000, and restarting the code. 

4.a. myROM[3]
4.b. myROM[5]
4.c. myROM[6] 

5.a. 225, the instruction will be run until the comparison instruction before it on myROM[6] turns on the zero flag which then prompts,
the jump zero instruction to kick in and skip the ROM Cell 8. Afterwards, the sub instruction found in myROM[9] will take 1 away from the value found in rg0 making it 14.
The instruction in myROM[10] makes the function jump 8 steps to myROM[3] which compares rg0 to 0 and if the comparison is not true, the following jump zero instruction is ignored,
resulting in rg1 to be set to the value of 15 again in myROM[15]. As a result, the original loop restarts, causing for another 15 iterations to occur before the same result is replicated 
continously. The program will stop running only when the comparison instruction in myROM[3] results in the jz instruction being true which then would skip around the program to end in instruction
myROM[1].

5.b. 15, this instruction wil be run whenever the previous function is skipped since the jump zero instruction will jump 3 program instructions,
which ends landing the program counter on my ROM 10 and then continuing to the following jmp instruction, which then restarts the inner loop as mentioned earlier. As a result, this subtraction instruction
will be run 15 times until the rg0 will be 0 and the program stops. This is how the value in part a was found since this would run 15 times along with the inner loop running 15 times, so together
it would be 15 x 15. 

5.c. 0, since the previous instrcution of a jump in myROM[11], this will increase the program count by 8, ending up in myROM[3] and never going into the myROM [12-15]. Even other jumps such as
the one in myROM[4] and myROM[7], it goes over the final lines as well and terminates the code at myROM[1].

5.d. 1, as explained in the previous parts, this is the last line that is ran when the program is finished since when the comparison of the value found in rg0 is compared to 0, resulting in the zero flag being set,
this allows for the zero jump to take action. This results in the code ending up on myROM[1], which is a jump that does not move the program counter i.e. the end of the program. 

5.e. The program is dealing with a nested loop, one if running the same operation of counting down from 15 to 0 and the bigger outside loop is running the same loop. However, the outside loop does not count down until
the inner loop reaches to 0. If the outside loop has not finished counting down, the inner loop will restart and run again, counting down from 15 to 0, and once again the outside loop will be decreased. Eventually, the 
outside loop will reach 0 and the code stops. 



